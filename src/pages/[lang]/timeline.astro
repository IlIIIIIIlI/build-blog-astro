---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { getLangFromUrl, useTranslations } from '../../i18n/utils';
import { languages } from '../../i18n/ui';

export async function getStaticPaths() {
  return Object.keys(languages).map(lang => ({ params: { lang } }));
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const posts = (await getCollection('blog', ({ id }) => {
  return id.startsWith(`${lang}/`);
})).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const years = [...new Set(posts.map(post => 
  new Date(post.data.pubDate).getFullYear()
))].sort((a, b) => b - a);
---

<Layout title={`${t('timeline.title')} - TechBlog`}>
  <div class="flex flex-col lg:flex-row gap-8">
    <aside class="lg:w-1/4">
      <div class="sticky top-4">
        <!-- Year Filter -->
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg border dark:border-gray-700">
          <h2 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">{t('timeline.years')}</h2>
          <div class="space-y-2">
            {years.map(year => (
              <button
                data-year={year}
                class="filter-year block w-full text-left px-3 py-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300"
              >
                {year}
              </button>
            ))}
          </div>
        </div>
      </div>
    </aside>

    <main class="lg:w-3/4">
      <div class="space-y-12">
        {years.map(year => (
          <div class="year-section" data-year={year}>
            <h2 class="text-2xl font-bold mb-6 text-gray-900 dark:text-white">{year}</h2>
            <div class="space-y-8">
              {posts
                .filter(post => new Date(post.data.pubDate).getFullYear() === year)
                .map(post => (
                  <article 
                    class="post-card border dark:border-gray-700 rounded-lg p-6 hover:shadow-lg transition-shadow"
                  >
                    <h3 class="text-xl font-bold mb-2">
                      <a href={`/${lang}/blog/${post.slug.split('/')[1]}`} class="text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400">
                        {post.data.title}
                      </a>
                    </h3>
                    <p class="text-gray-600 dark:text-gray-400 mb-4">{post.data.description}</p>
                    <time class="text-sm text-gray-500 dark:text-gray-400" datetime={post.data.pubDate.toISOString()}>
                      {post.data.pubDate.toLocaleDateString(lang, {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                      })}
                    </time>
                  </article>
                ))}
            </div>
          </div>
        ))}
      </div>
    </main>
  </div>
</Layout>

<script>
  let activeYear = null;

  function updateVisibility() {
    const yearSections = document.querySelectorAll('.year-section');
    yearSections.forEach(section => {
      const sectionYear = parseInt(section.getAttribute('data-year'));
      section.classList.toggle('hidden', activeYear !== null && sectionYear !== activeYear);
    });
  }

  document.querySelectorAll('.filter-year').forEach(button => {
    button.addEventListener('click', () => {
      const year = parseInt(button.getAttribute('data-year'));
      if (activeYear === year) {
        activeYear = null;
        button.classList.remove('bg-blue-100', 'dark:bg-blue-900', 'text-blue-700', 'dark:text-blue-300');
      } else {
        activeYear = year;
        document.querySelectorAll('.filter-year').forEach(btn => {
          btn.classList.remove('bg-blue-100', 'dark:bg-blue-900', 'text-blue-700', 'dark:text-blue-300');
        });
        button.classList.add('bg-blue-100', 'dark:bg-blue-900', 'text-blue-700', 'dark:text-blue-300');
      }
      updateVisibility();
    });
  });
</script>